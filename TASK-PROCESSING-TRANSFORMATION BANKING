CREATE OR REPLACE STREAM BANKING.CUSTOMER360_BRONZE.BRONZE_ACCOUNTS_STREAM 
ON TABLE BANKING.CUSTOMER360_BRONZE.ACCOUNTS;

SELECT * FROM BANKING.CUSTOMER360_BRONZE.BRONZE_ACCOUNTS_STREAM;





CREATE OR REPLACE TASK BANKING.CUSTOMER360_SILVER.UPDATE_ACCOUNTS_TASK
WAREHOUSE = 'COMPUTE_WH' -- Replace with your warehouse name
ALLOW_OVERLAPPING_EXECUTION = FALSE
COMMENT = 'Task to update ACCOUNTS_PROCESSED table in the Silver layer based on changes in the Bronze layer'
WHEN SYSTEM$STREAM_HAS_DATA('BANKING.CUSTOMER360_BRONZE.BRONZE_ACCOUNTS_STREAM')
AS
MERGE INTO BANKING.CUSTOMER360_SILVER.ACCOUNTS_PROCESSED AS SILVER
USING (
    SELECT * 
    FROM BANKING.CUSTOMER360_BRONZE.BRONZE_ACCOUNTS_STREAM 
    WHERE METADATA$ACTION IN ('INSERT', 'UPDATE') -- Process only relevant changes
) AS STREAM_DATA
ON SILVER.ACCOUNT_KEY = STREAM_DATA.ACCOUNT_KEY
WHEN MATCHED THEN
    UPDATE SET
        SILVER.CUSTOMERID = STREAM_DATA.CUSTOMERID,
        SILVER.PRODUCT_ID = STREAM_DATA.PRODUCT_ID,
        SILVER.ACCOUNT_TYPE = STREAM_DATA.ACCOUNT_TYPE,
        SILVER.ACCOUNTNUMBER = STREAM_DATA.ACCOUNTNUMBER,
        SILVER.CUSTOMERNAME = STREAM_DATA.CUSTOMERNAME,
        SILVER.AVERAGE_MONTHLY_BALANCE = COALESCE(STREAM_DATA.AVERAGE_MONTHLY_BALANCE, 0),
        SILVER.CURRENT_BALANCE = COALESCE(STREAM_DATA.CURRENT_BALANCE, 0),
        SILVER.ACCOUNT_OPEN_DATE = STREAM_DATA.ACCOUNT_OPEN_DATE,
        SILVER.ACCOUNT_CLOSE_DATE = STREAM_DATA.ACCOUNT_CLOSE_DATE,
        SILVER.ACCOUNT_STATUS = COALESCE(NULLIF(STREAM_DATA.ACCOUNT_STATUS, ''), 'UNKNOWN'),
        SILVER.PRINCIPAL_AMOUNT = STREAM_DATA.PRINCIPAL_AMOUNT,
        SILVER.MONTHLY_PAYMENT = STREAM_DATA.MONTHLY_PAYMENT,
        SILVER.CARD_LIMIT = STREAM_DATA.CARD_LIMIT,
        SILVER.CARD_NUMBER = STREAM_DATA.CARD_NUMBER,
        SILVER.TENURE = STREAM_DATA.TENURE,
        SILVER.AC_TYPE = COALESCE(NULLIF(STREAM_DATA.AC_TYPE, ''), 'UNKNOWN')
WHEN NOT MATCHED THEN
    INSERT (
        ACCOUNT_KEY, CUSTOMERID, PRODUCT_ID, ACCOUNT_TYPE, ACCOUNTNUMBER, CUSTOMERNAME,
        AVERAGE_MONTHLY_BALANCE, CURRENT_BALANCE, ACCOUNT_OPEN_DATE, ACCOUNT_CLOSE_DATE,
        ACCOUNT_STATUS, PRINCIPAL_AMOUNT, MONTHLY_PAYMENT, CARD_LIMIT, CARD_NUMBER, TENURE, AC_TYPE
    )
    VALUES (
        STREAM_DATA.ACCOUNT_KEY, STREAM_DATA.CUSTOMERID, STREAM_DATA.PRODUCT_ID, STREAM_DATA.ACCOUNT_TYPE,
        STREAM_DATA.ACCOUNTNUMBER, STREAM_DATA.CUSTOMERNAME, 
        COALESCE(STREAM_DATA.AVERAGE_MONTHLY_BALANCE, 0), COALESCE(STREAM_DATA.CURRENT_BALANCE, 0),
        STREAM_DATA.ACCOUNT_OPEN_DATE, STREAM_DATA.ACCOUNT_CLOSE_DATE, 
        COALESCE(NULLIF(STREAM_DATA.ACCOUNT_STATUS, ''), 'UNKNOWN'),
        STREAM_DATA.PRINCIPAL_AMOUNT, STREAM_DATA.MONTHLY_PAYMENT, STREAM_DATA.CARD_LIMIT,
        STREAM_DATA.CARD_NUMBER, STREAM_DATA.TENURE, 
        COALESCE(NULLIF(STREAM_DATA.AC_TYPE, ''), 'UNKNOWN')
    );




ALTER TASK BANKING.CUSTOMER360_SILVER.UPDATE_ACCOUNTS_TASK RESUME;



DESCRIBE TASK BANKING.CUSTOMER360_SILVER.UPDATE_ACCOUNTS_TASK

SELECT * FROM BANKING.CUSTOMER360_BRONZE.BRONZE_ACCOUNTS_STREAM WHERE METADATA$ACTION IN ('INSERT', 'UPDATE');

SHOW STREAMS LIKE 'BRONZE_ACCOUNTS_STREAM' IN SCHEMA BANKING.CUSTOMER360_BRONZE;


INSERT INTO BANKING.CUSTOMER360_BRONZE.ACCOUNTS (
    ACCOUNT_KEY, CUSTOMERID, PRODUCT_ID, ACCOUNT_TYPE, ACCOUNTNUMBER, CUSTOMERNAME,
    AVERAGE_MONTHLY_BALANCE, CURRENT_BALANCE, ACCOUNT_OPEN_DATE, ACCOUNT_CLOSE_DATE,
    ACCOUNT_STATUS, PRINCIPAL_AMOUNT, MONTHLY_PAYMENT, CARD_LIMIT, CARD_NUMBER, TENURE, AC_TYPE
)
VALUES
    (
        'AC123', -- ACCOUNT_KEY (VARCHAR)
        'CUST001', -- CUSTOMERID (VARCHAR)
        'PROD001', -- PRODUCT_ID (VARCHAR)
        'Savings', -- ACCOUNT_TYPE (VARCHAR)
        'AC-0001', -- ACCOUNTNUMBER (VARCHAR)
        'John Doe', -- CUSTOMERNAME (VARCHAR)
        5000, -- AVERAGE_MONTHLY_BALANCE (NUMBER)
        15000, -- CURRENT_BALANCE (NUMBER)
        '2023-01-01', -- ACCOUNT_OPEN_DATE (DATE)
        NULL, -- ACCOUNT_CLOSE_DATE (DATE, can be NULL)
        'ACTIVE', -- ACCOUNT_STATUS (VARCHAR)
        10000, -- PRINCIPAL_AMOUNT (NUMBER)
        500, -- MONTHLY_PAYMENT (NUMBER)
        20000, -- CARD_LIMIT (NUMBER)
        '1234567890123456', -- CARD_NUMBER (VARCHAR)
        36, -- TENURE (NUMBER)
        'Type1' -- AC_TYPE (VARCHAR)
    );


CREATE OR REPLACE STREAM BANKING.CUSTOMER360_BRONZE.BRONZE_CUSTOMERS_STREAM 
ON TABLE BANKING.CUSTOMER360_BRONZE.CUSTOMERS;

-- Test the stream:
SELECT * FROM BANKING.CUSTOMER360_BRONZE.BRONZE_CUSTOMERS_STREAM;


CREATE OR REPLACE TASK BANKING.CUSTOMER360_SILVER.UPDATE_CUSTOMERS_TASK
WAREHOUSE = 'COMPUTE_WH' -- Replace with your warehouse name
ALLOW_OVERLAPPING_EXECUTION = FALSE
COMMENT = 'Task to update CUSTOMERS_PROCESSED table in the Silver layer based on changes in the Bronze layer'
WHEN SYSTEM$STREAM_HAS_DATA('BANKING.CUSTOMER360_BRONZE.BRONZE_CUSTOMERS_STREAM')
AS
MERGE INTO BANKING.CUSTOMER360_SILVER.CUSTOMERS_PROCESSED AS SILVER
USING (
    SELECT * 
    FROM BANKING.CUSTOMER360_BRONZE.BRONZE_CUSTOMERS_STREAM
    WHERE METADATA$ACTION IN ('INSERT', 'UPDATE') -- Process only relevant changes
) AS STREAM_DATA
ON SILVER.CUSTOMERKEY = STREAM_DATA.CUSTOMERKEY
WHEN MATCHED THEN
    UPDATE SET
        SILVER.CUSTOMERID = STREAM_DATA.CUSTOMERID,
        SILVER.NAME = STREAM_DATA.NAME,
        SILVER.MARITALSTATUS = COALESCE(NULLIF(STREAM_DATA.MARITALSTATUS, ''), 'UNKNOWN'),
        SILVER.COUNTRY = STREAM_DATA.COUNTRY,
        SILVER.PHONENUMBER = STREAM_DATA.PHONENUMBER,
        SILVER.GENDER = STREAM_DATA.GENDER,
        SILVER.STATE = STREAM_DATA.STATE,
        SILVER.PINCODE = COALESCE(NULLIF(STREAM_DATA.PINCODE, ''), 'UNKNOWN'),
        SILVER.DATEOFBIRTH = STREAM_DATA.DATEOFBIRTH,
        SILVER.REGION = STREAM_DATA.REGION,
        SILVER.EMAIL = COALESCE(NULLIF(STREAM_DATA.EMAIL, ''), 'UNKNOWN'),
        SILVER.CITY = STREAM_DATA.CITY
WHEN NOT MATCHED THEN
    INSERT (
        CUSTOMERKEY, CUSTOMERID, NAME, MARITALSTATUS, COUNTRY, PHONENUMBER,
        GENDER, STATE, PINCODE, DATEOFBIRTH, REGION, EMAIL, CITY
    )
    VALUES (
        STREAM_DATA.CUSTOMERKEY, STREAM_DATA.CUSTOMERID, STREAM_DATA.NAME,
        COALESCE(NULLIF(STREAM_DATA.MARITALSTATUS, ''), 'UNKNOWN'),
        STREAM_DATA.COUNTRY, STREAM_DATA.PHONENUMBER, STREAM_DATA.GENDER,
        STREAM_DATA.STATE, COALESCE(NULLIF(STREAM_DATA.PINCODE, ''), 'UNKNOWN'),
        STREAM_DATA.DATEOFBIRTH, STREAM_DATA.REGION,
        COALESCE(NULLIF(STREAM_DATA.EMAIL, ''), 'UNKNOWN'),
        STREAM_DATA.CITY
    );


DESC TASK BANKING.CUSTOMER360_SILVER.UPDATE_CUSTOMERS_TASK
ALTER TASK BANKING.CUSTOMER360_SILVER.UPDATE_CUSTOMERS_TASK RESUME;
SELECT * FROM BANKING.CUSTOMER360_SILVER.CUSTOMERS_PROCESSED;

CREATE OR REPLACE STREAM BANKING.CUSTOMER360_BRONZE.BRONZE_TRANSACTIONS_STREAM
ON TABLE BANKING.CUSTOMER360_BRONZE.TRANSACTIONS;

SELECT * FROM BANKING.CUSTOMER360_BRONZE.BRONZE_TRANSACTIONS_STREAM;



CREATE OR REPLACE TASK BANKING.CUSTOMER360_SILVER.UPDATE_TRANSACTIONS_TASK
WAREHOUSE = 'COMPUTE_WH' -- Replace with your warehouse name
ALLOW_OVERLAPPING_EXECUTION = FALSE
COMMENT = 'Task to update TRANSACTIONS_PROCESSED table in the Silver layer based on changes in the Bronze layer'
WHEN SYSTEM$STREAM_HAS_DATA('BANKING.CUSTOMER360_BRONZE.BRONZE_TRANSACTIONS_STREAM')
AS
MERGE INTO BANKING.CUSTOMER360_SILVER.TRANSACTIONS_PROCESSED AS SILVER
USING (
    SELECT * 
    FROM BANKING.CUSTOMER360_BRONZE.BRONZE_TRANSACTIONS_STREAM 
    WHERE METADATA$ACTION IN ('INSERT', 'UPDATE') -- Process only relevant changes
) AS STREAM_DATA
ON SILVER.TRANSACTION_ID = STREAM_DATA.TRANSACTION_ID
WHEN MATCHED THEN
    UPDATE SET
        SILVER.PRODUCT_ID = STREAM_DATA.PRODUCT_ID,
        SILVER.ACCOUNT_KEY = STREAM_DATA.ACCOUNT_KEY,
        SILVER.PAYMENT_ID = STREAM_DATA.PAYMENT_ID,
        SILVER.PAYMENT_TYPE = STREAM_DATA.PAYMENT_TYPE,
        SILVER.PAYMENT_APP = STREAM_DATA.PAYMENT_APP,
        SILVER.TRANSACTION_DATE = COALESCE(STREAM_DATA.TRANSACTION_DATE, '1900-01-01'),
        SILVER.TRANSACTION_AMT = COALESCE(STREAM_DATA.TRANSACTION_AMT, 0),
        SILVER.TRANSACTION_TYPE = STREAM_DATA.TRANSACTION_TYPE,
        SILVER.BALANCE = COALESCE(STREAM_DATA.BALANCE, 0),
        SILVER.CUSTOMERID = STREAM_DATA.CUSTOMERID
WHEN NOT MATCHED THEN
    INSERT (
        TRANSACTION_ID, PRODUCT_ID, ACCOUNT_KEY, PAYMENT_ID, PAYMENT_TYPE, PAYMENT_APP,
        TRANSACTION_DATE, TRANSACTION_AMT, TRANSACTION_TYPE, BALANCE, CUSTOMERID
    )
    VALUES (
        STREAM_DATA.TRANSACTION_ID, STREAM_DATA.PRODUCT_ID, STREAM_DATA.ACCOUNT_KEY, STREAM_DATA.PAYMENT_ID,
        STREAM_DATA.PAYMENT_TYPE, STREAM_DATA.PAYMENT_APP, 
        COALESCE(STREAM_DATA.TRANSACTION_DATE, '1900-01-01'), COALESCE(STREAM_DATA.TRANSACTION_AMT, 0),
        STREAM_DATA.TRANSACTION_TYPE, COALESCE(STREAM_DATA.BALANCE, 0), STREAM_DATA.CUSTOMERID
    );

DESC TASK BANKING.CUSTOMER360_SILVER.UPDATE_TRANSACTIONS_TASK
ALTER TASK BANKING.CUSTOMER360_SILVER.UPDATE_TRANSACTIONS_TASK RESUME;
SELECT * FROM BANKING.CUSTOMER360_SILVER.TRANSACTIONS_PROCESSED;



CREATE OR REPLACE SCHEMA  BANKING.CUSTOMER360_GOLD






    
