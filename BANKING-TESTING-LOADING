-- Step 1: Create Aggregated Accounts Table in Gold Layer
CREATE OR REPLACE TABLE BANKING.CUSTOMER360_GOLD.ACCOUNT_AGGREGATED (
    CUSTOMERID STRING,  -- Adding CUSTOMERID to the aggregation
    ACCOUNTNUMBER STRING,
    ACCOUNT_TYPE STRING,
    TOTAL_ACCOUNT_BALANCE NUMERIC,
    TOTAL_PRINCIPAL NUMERIC,
    AVG_MONTHLY_PAYMENT NUMERIC,
    FIRST_ACCOUNT_OPENED DATE,
    LAST_ACCOUNT_CLOSED DATE
);


-- Step 2: Create Stream on Silver Layer for Accounts
CREATE OR REPLACE STREAM BANKING.CUSTOMER360_SILVER.ACCOUNTS_STREAM
    ON TABLE BANKING.CUSTOMER360_SILVER.ACCOUNTS_PROCESSED


    
-- Step 3: Create Task to Aggregate Accounts Data into Gold Layer
CREATE OR REPLACE TASK BANKING.CUSTOMER360_GOLD.UPDATE_ACCOUNT_AGGREGATED_TASK
WAREHOUSE = 'COMPUTE_WH' -- Replace with your warehouse name
ALLOW_OVERLAPPING_EXECUTION = FALSE
COMMENT = 'Task to aggregate Accounts data into Gold layer'
WHEN SYSTEM$STREAM_HAS_DATA('BANKING.CUSTOMER360_SILVER.ACCOUNTS_STREAM')
AS
MERGE INTO BANKING.CUSTOMER360_GOLD.ACCOUNT_AGGREGATED AS GOLD
USING (
    SELECT 
        CUSTOMERID,  -- Including CUSTOMERID in the aggregation
        ACCOUNTNUMBER, 
        ACCOUNT_TYPE, 
        SUM(CURRENT_BALANCE) AS TOTAL_ACCOUNT_BALANCE,
        SUM(PRINCIPAL_AMOUNT) AS TOTAL_PRINCIPAL,
        AVG(MONTHLY_PAYMENT) AS AVG_MONTHLY_PAYMENT,
        MAX(ACCOUNT_OPEN_DATE) AS FIRST_ACCOUNT_OPENED,
        MIN(ACCOUNT_CLOSE_DATE) AS LAST_ACCOUNT_CLOSED
    FROM BANKING.CUSTOMER360_SILVER.ACCOUNTS_PROCESSED
    GROUP BY CUSTOMERID, ACCOUNTNUMBER, ACCOUNT_TYPE
) AS SOURCE
ON GOLD.CUSTOMERID = SOURCE.CUSTOMERID 
    AND GOLD.ACCOUNTNUMBER = SOURCE.ACCOUNTNUMBER
    AND GOLD.ACCOUNT_TYPE = SOURCE.ACCOUNT_TYPE
WHEN MATCHED THEN
    UPDATE SET 
        GOLD.TOTAL_ACCOUNT_BALANCE = SOURCE.TOTAL_ACCOUNT_BALANCE,
        GOLD.TOTAL_PRINCIPAL = SOURCE.TOTAL_PRINCIPAL,
        GOLD.AVG_MONTHLY_PAYMENT = SOURCE.AVG_MONTHLY_PAYMENT,
        GOLD.FIRST_ACCOUNT_OPENED = SOURCE.FIRST_ACCOUNT_OPENED,
        GOLD.LAST_ACCOUNT_CLOSED = SOURCE.LAST_ACCOUNT_CLOSED
WHEN NOT MATCHED THEN
    INSERT (
        CUSTOMERID, 
        ACCOUNTNUMBER, 
        ACCOUNT_TYPE, 
        TOTAL_ACCOUNT_BALANCE, 
        TOTAL_PRINCIPAL, 
        AVG_MONTHLY_PAYMENT, 
        FIRST_ACCOUNT_OPENED, 
        LAST_ACCOUNT_CLOSED
    ) VALUES (
        SOURCE.CUSTOMERID, 
        SOURCE.ACCOUNTNUMBER, 
        SOURCE.ACCOUNT_TYPE, 
        SOURCE.TOTAL_ACCOUNT_BALANCE, 
        SOURCE.TOTAL_PRINCIPAL, 
        SOURCE.AVG_MONTHLY_PAYMENT, 
        SOURCE.FIRST_ACCOUNT_OPENED, 
        SOURCE.LAST_ACCOUNT_CLOSED
    );

    

DESC TASK BANKING.CUSTOMER360_GOLD.UPDATE_ACCOUNT_AGGREGATED_TASK
ALTER TASK BANKING.CUSTOMER360_GOLD.UPDATE_ACCOUNT_AGGREGATED_TASK RESUME;
SELECT * FROM BANKING.CUSTOMER360_GOLD.ACCOUNT_AGGREGATED;
SELECT * FROM BANKING.CUSTOMER360_SILVER.ACCOUNTS_PROCESSED
SELECT * FROM BANKING.CUSTOMER360_SILVER.ACCOUNTS_STREAM;
-- Verify the stream data in the Bronze Layer
SELECT * 
FROM BANKING.CUSTOMER360_BRONZE.BRONZE_ACCOUNTS_STREAM;

-- Insert 10 records into the Bronze layer (Customer360 stream table)
INSERT INTO BANKING.CUSTOMER360_BRONZE.ACCOUNTS (
    ACCOUNT_KEY, CUSTOMERID, PRODUCT_ID, ACCOUNT_TYPE, ACCOUNTNUMBER, 
    CUSTOMERNAME, AVERAGE_MONTHLY_BALANCE, CURRENT_BALANCE, 
    ACCOUNT_OPEN_DATE, ACCOUNT_CLOSE_DATE, ACCOUNT_STATUS, 
    PRINCIPAL_AMOUNT, MONTHLY_PAYMENT, CARD_LIMIT, CARD_NUMBER, 
    TENURE, AC_TYPE
)
VALUES 
('ACC123', 'CUST001', 'P123', 'SAVINGS', 'ACC123', 'John Doe', 1000, 500, 
 '2023-01-01', '2025-01-01', 'ACTIVE', 500, 200, 1000, 'CARD001', 36, 'SAVINGS'),
('ACC124', 'CUST002', 'P124', 'CHECKING', 'ACC124', 'Jane Smith', 1200, 600, 
 '2022-02-01', '2024-12-31', 'ACTIVE', 600, 250, 1200, 'CARD002', 24, 'CHECKING'),
('ACC125', 'CUST003', 'P125', 'SAVINGS', 'ACC125', 'Alice Brown', 1500, 800, 
 '2021-03-15', '2023-08-20', 'INACTIVE', 700, 300, 1500, 'CARD003', 60, 'SAVINGS'),
('ACC126', 'CUST004', 'P126', 'CHECKING', 'ACC126', 'Bob Green', 1100, 550, 
 '2020-11-10', '2024-11-10', 'ACTIVE', 550, 180, 1100, 'CARD004', 48, 'CHECKING'),
('ACC127', 'CUST005', 'P127', 'SAVINGS', 'ACC127', 'Carol White', 1300, 700, 
 '2022-05-01', '2025-01-01', 'ACTIVE', 650, 200, 1300, 'CARD005', 36, 'SAVINGS'),
('ACC128', 'CUST006', 'P128', 'CHECKING', 'ACC128', 'David Black', 1600, 850, 
 '2021-07-01', '2024-06-30', 'ACTIVE', 800, 400, 1600, 'CARD006', 72, 'CHECKING'),
('ACC129', 'CUST007', 'P129', 'SAVINGS', 'ACC129', 'Eva Gray', 1700, 900, 
 '2020-06-01', '2025-12-31', 'INACTIVE', 850, 450, 1700, 'CARD007', 36, 'SAVINGS'),
('ACC130', 'CUST008', 'P130', 'CHECKING', 'ACC130', 'Frank Yellow', 1400, 750, 
 '2022-01-10', '2023-10-01', 'ACTIVE', 700, 300, 1400, 'CARD008', 48, 'CHECKING'),
('ACC131', 'CUST009', 'P131', 'SAVINGS', 'ACC131', 'Grace Pink', 1800, 950, 
 '2023-04-15', '2024-08-30', 'ACTIVE', 900, 500, 1800, 'CARD009', 60, 'SAVINGS'),
('ACC132', 'CUST010', 'P132', 'CHECKING', 'ACC132', 'Henry Blue', 1900, 1000, 
 '2021-01-01', '2025-12-01', 'ACTIVE', 1000, 550, 1900, 'CARD010', 72, 'CHECKING');

TRUNCATE BANKING.CUSTOMER360_GOLD.ACCOUNT_AGGREGATED;

TRUNCATE BANKING.CUSTOMER360_SILVER.ACCOUNTS_PROCESSED

TRUNCATE  BANKING.CUSTOMER360_BRONZE.ACCOUNTS
-- Truncate data in Bronze layer
SELECT * FROM BANKING.CUSTOMER360_BRONZE.ACCOUNTS;

-- Truncate data in Silver layer
SELECT * FROM BANKING.CUSTOMER360_SILVER.ACCOUNTS_PROCESSED;

-- Truncate data in Gold layer
SELECT * FROM BANKING.CUSTOMER360_GOLD.ACCOUNT_AGGREGATED;


desc task BANKING.CUSTOMER360_GOLD.UPDATE_TRANSACTION_AGGREGATED_TASK






CREATE OR REPLACE TABLE BANKING.CUSTOMER360_GOLD.CUSTOMER_AGGREGATED (
    CUSTOMERID STRING,
    NAME STRING,
    GENDER STRING,
    MARITALSTATUS STRING,
    CITY STRING,
    STATE STRING,
    NUM_ACCOUNTS INT,
    TOTAL_ACCOUNT_BALANCE DECIMAL(20, 2),
    TOTAL_SPENDING DECIMAL(20, 2),
    AVG_ACCOUNT_BALANCE DECIMAL(20, 2),
    TRANSACTION_COUNT INT,
    FIRST_TRANSACTION_DATE DATE,
    LAST_TRANSACTION_DATE DATE,
    NUM_ACCOUNT_TYPES INT,
    LAST_ACCOUNT_OPENED DATE,
    FIRST_ACCOUNT_CLOSED DATE
);


CREATE OR REPLACE STREAM BANKING.CUSTOMER360_SILVER.CUSTOMERS_STREAM
    ON TABLE BANKING.CUSTOMER360_SILVER.CUSTOMERS_PROCESSED
    

CREATE OR REPLACE TASK BANKING.CUSTOMER360_GOLD.UPDATE_CUSTOMER_AGGREGATED_TASK
WAREHOUSE = 'COMPUTE_WH'  -- Replace with your warehouse name
ALLOW_OVERLAPPING_EXECUTION = FALSE
COMMENT = 'Task to aggregate CUSTOMERS data into Gold layer'
WHEN SYSTEM$STREAM_HAS_DATA('BANKING.CUSTOMER360_SILVER.CUSTOMERS_STREAM')
AS
MERGE INTO BANKING.CUSTOMER360_GOLD.CUSTOMER_AGGREGATED AS GOLD
USING (
    SELECT
        CUSTOMERID,  -- Customer ID
        NAME,        -- Customer Name
        COUNTRY,     -- Country
        REGION,
        STATE,
        CITY,
        GENDER,
        MARITALSTATUS,
        COUNT(*) AS TOTAL_CUSTOMERS_IN_REGION,           -- Total customers in region
        COUNT(*) AS TOTAL_CUSTOMERS_IN_CITY,             -- Total customers in city
        COUNT(DISTINCT EMAIL) AS UNIQUE_EMAIL_COUNT,     -- Unique email addresses
        COUNT(DISTINCT PHONENUMBER) AS UNIQUE_PHONE_COUNT, -- Unique phone numbers
        MIN(DATEOFBIRTH) AS OLDEST_CUSTOMER_DOB,         -- Oldest customer's Date of Birth
        MAX(DATEOFBIRTH) AS YOUNGEST_CUSTOMER_DOB        -- Youngest customer's Date of Birth
    FROM
        BANKING.CUSTOMER360_SILVER.CUSTOMERS_PROCESSED
    GROUP BY
        CUSTOMERID, NAME, COUNTRY, REGION, STATE, CITY, GENDER, MARITALSTATUS
) AS SOURCE
ON GOLD.CUSTOMERID = SOURCE.CUSTOMERID
    AND GOLD.NAME = SOURCE.NAME
    AND GOLD.COUNTRY = SOURCE.COUNTRY
    AND GOLD.REGION = SOURCE.REGION
    AND GOLD.STATE = SOURCE.STATE
    AND GOLD.CITY = SOURCE.CITY
    AND GOLD.GENDER = SOURCE.GENDER
    AND GOLD.MARITALSTATUS = SOURCE.MARITALSTATUS
WHEN MATCHED THEN
    UPDATE SET 
        GOLD.TOTAL_CUSTOMERS_IN_REGION = SOURCE.TOTAL_CUSTOMERS_IN_REGION,
        GOLD.TOTAL_CUSTOMERS_IN_CITY = SOURCE.TOTAL_CUSTOMERS_IN_CITY,
        GOLD.UNIQUE_EMAIL_COUNT = SOURCE.UNIQUE_EMAIL_COUNT,
        GOLD.UNIQUE_PHONE_COUNT = SOURCE.UNIQUE_PHONE_COUNT,
        GOLD.OLDEST_CUSTOMER_DOB = SOURCE.OLDEST_CUSTOMER_DOB,
        GOLD.YOUNGEST_CUSTOMER_DOB = SOURCE.YOUNGEST_CUSTOMER_DOB
WHEN NOT MATCHED THEN
    INSERT (
        CUSTOMERID,
        NAME,
        COUNTRY,
        REGION, 
        STATE, 
        CITY, 
        GENDER, 
        MARITALSTATUS,
        TOTAL_CUSTOMERS_IN_REGION,
        TOTAL_CUSTOMERS_IN_CITY,
        UNIQUE_EMAIL_COUNT,
        UNIQUE_PHONE_COUNT,
        OLDEST_CUSTOMER_DOB,
        YOUNGEST_CUSTOMER_DOB
    ) VALUES (
        SOURCE.CUSTOMERID,
        SOURCE.NAME,
        SOURCE.COUNTRY,
        SOURCE.REGION, 
        SOURCE.STATE, 
        SOURCE.CITY, 
        SOURCE.GENDER, 
        SOURCE.MARITALSTATUS,
        SOURCE.TOTAL_CUSTOMERS_IN_REGION,
        SOURCE.TOTAL_CUSTOMERS_IN_CITY,
        SOURCE.UNIQUE_EMAIL_COUNT,
        SOURCE.UNIQUE_PHONE_COUNT,
        SOURCE.OLDEST_CUSTOMER_DOB,
        SOURCE.YOUNGEST_CUSTOMER_DOB
    );



DESC TASK BANKING.CUSTOMER360_GOLD.UPDATE_TRANSACTION_AGGREGATED_TASK
ALTER TASK BANKING.CUSTOMER360_GOLD.UPDATE_TRANSACTION_AGGREGATED_TASK RESUME;
SELECT * FROM BANKING.CUSTOMER360_GOLD.TRANSACTIONS_AGGREGATED;
SELECT * FROM BANKING.CUSTOMER360_SILVER.TRANSACTIONS_PROCESSED
SELECT * FROM BANKING.CUSTOMER360_SILVER.TRANSACTIONS_PROCESSED_STREAM;

DESC TABLE BANKING.CUSTOMER360_BRONZE.TRANSACTIONS


-- Insert Sample Data into Bronze Layer - TRANSACTIONS table
INSERT INTO BANKING.CUSTOMER360_BRONZE.TRANSACTIONS (
    TRANSACTION_ID, PRODUCT_ID, ACCOUNT_KEY, PAYMENT_ID, PAYMENT_TYPE, 
    PAYMENT_APP, TRANSACTION_DATE, TRANSACTION_AMT, TRANSACTION_TYPE, 
    BALANCE, CUSTOMERID
)
VALUES
('TXN001', 'P123', 'ACC001', 'PAY001', 'Credit', 'AppA', '2023-01-15', 100.00, 'Purchase', 2000.00, 'CUST001'),
('TXN002', 'P124', 'ACC002', 'PAY002', 'Debit', 'AppB', '2023-01-20', 200.00, 'Refund', 1800.00, 'CUST001'),
('TXN003', 'P123', 'ACC003', 'PAY003', 'Credit', 'AppA', '2023-02-10', 50.00, 'Purchase', 5000.00, 'CUST002'),
('TXN004', 'P125', 'ACC004', 'PAY004', 'Debit', 'AppC', '2023-02-15', 150.00, 'Purchase', 4000.00, 'CUST002'),
('TXN005', 'P124', 'ACC005', 'PAY005', 'Credit', 'AppB', '2023-03-05', 300.00, 'Purchase', 2500.00, 'CUST003'),
('TXN006', 'P125', 'ACC006', 'PAY006', 'Debit', 'AppA', '2023-03-10', 250.00, 'Refund', 1000.00, 'CUST003'),
('TXN007', 'P123', 'ACC007', 'PAY007', 'Credit', 'AppC', '2023-04-01', 400.00, 'Purchase', 1500.00, 'CUST004'),
('TXN008', 'P124', 'ACC008', 'PAY008', 'Debit', 'AppB', '2023-04-05', 500.00, 'Refund', 3500.00, 'CUST004'),
('TXN009', 'P125', 'ACC009', 'PAY009', 'Credit', 'AppA', '2023-05-01', 600.00, 'Purchase', 2000.00, 'CUST005'),
('TXN010', 'P123', 'ACC010', 'PAY010', 'Debit', 'AppC', '2023-05-05', 700.00, 'Refund', 1200.00, 'CUST005');



CREATE OR REPLACE TABLE BANKING.CUSTOMER360_GOLD.CUSTOMER_AGGREGATED (
    CUSTOMERID VARCHAR(16777216),
    NAME VARCHAR(16777216),
    GENDER VARCHAR(16777216),
    MARITALSTATUS VARCHAR(16777216),
    CITY VARCHAR(16777216),
    STATE VARCHAR(16777216),
    REGION VARCHAR(16777216),
    COUNTRY VARCHAR(16777216),
    TOTAL_CUSTOMERS_IN_REGION NUMBER(38, 0),
    TOTAL_CUSTOMERS_IN_CITY NUMBER(38, 0),
    UNIQUE_EMAIL_COUNT NUMBER(38, 0),
    UNIQUE_PHONE_COUNT NUMBER(38, 0),
    OLDEST_CUSTOMER_DOB DATE,
    YOUNGEST_CUSTOMER_DOB DATE
);




CREATE OR REPLACE TASK BANKING.CUSTOMER360_GOLD.UPDATE_CUSTOMER_AGGREGATED_TASK
WAREHOUSE = 'COMPUTE_WH'  -- Replace with your warehouse name
ALLOW_OVERLAPPING_EXECUTION = FALSE
COMMENT = 'Task to aggregate CUSTOMERS data into Gold layer'
WHEN SYSTEM$STREAM_HAS_DATA('BANKING.CUSTOMER360_SILVER.CUSTOMERS_STREAM')
AS
MERGE INTO BANKING.CUSTOMER360_GOLD.CUSTOMER_AGGREGATED AS GOLD
USING (
    SELECT
        CUSTOMERID,  -- Customer ID
        NAME,        -- Customer Name
        COUNTRY,     -- Country
        REGION,
        STATE,
        CITY,
        GENDER,
        MARITALSTATUS,
        COUNT(*) AS TOTAL_CUSTOMERS_IN_REGION,           -- Total customers in region
        COUNT(*) AS TOTAL_CUSTOMERS_IN_CITY,             -- Total customers in city
        COUNT(DISTINCT EMAIL) AS UNIQUE_EMAIL_COUNT,     -- Unique email addresses
        COUNT(DISTINCT PHONENUMBER) AS UNIQUE_PHONE_COUNT, -- Unique phone numbers
        MIN(DATEOFBIRTH) AS OLDEST_CUSTOMER_DOB,         -- Oldest customer's Date of Birth
        MAX(DATEOFBIRTH) AS YOUNGEST_CUSTOMER_DOB        -- Youngest customer's Date of Birth
    FROM
        BANKING.CUSTOMER360_SILVER.CUSTOMERS_PROCESSED
    GROUP BY
        CUSTOMERID, NAME, COUNTRY, REGION, STATE, CITY, GENDER, MARITALSTATUS
) AS SOURCE
ON GOLD.CUSTOMERID = SOURCE.CUSTOMERID
    AND GOLD.NAME = SOURCE.NAME
    AND GOLD.COUNTRY = SOURCE.COUNTRY
    AND GOLD.REGION = SOURCE.REGION
    AND GOLD.STATE = SOURCE.STATE
    AND GOLD.CITY = SOURCE.CITY
    AND GOLD.GENDER = SOURCE.GENDER
    AND GOLD.MARITALSTATUS = SOURCE.MARITALSTATUS
WHEN MATCHED THEN
    UPDATE SET 
        GOLD.TOTAL_CUSTOMERS_IN_REGION = SOURCE.TOTAL_CUSTOMERS_IN_REGION,
        GOLD.TOTAL_CUSTOMERS_IN_CITY = SOURCE.TOTAL_CUSTOMERS_IN_CITY,
        GOLD.UNIQUE_EMAIL_COUNT = SOURCE.UNIQUE_EMAIL_COUNT,
        GOLD.UNIQUE_PHONE_COUNT = SOURCE.UNIQUE_PHONE_COUNT,
        GOLD.OLDEST_CUSTOMER_DOB = SOURCE.OLDEST_CUSTOMER_DOB,
        GOLD.YOUNGEST_CUSTOMER_DOB = SOURCE.YOUNGEST_CUSTOMER_DOB
WHEN NOT MATCHED THEN
    INSERT (
        CUSTOMERID,
        NAME,
        COUNTRY,
        REGION, 
        STATE, 
        CITY, 
        GENDER, 
        MARITALSTATUS,
        TOTAL_CUSTOMERS_IN_REGION,
        TOTAL_CUSTOMERS_IN_CITY,
        UNIQUE_EMAIL_COUNT,
        UNIQUE_PHONE_COUNT,
        OLDEST_CUSTOMER_DOB,
        YOUNGEST_CUSTOMER_DOB
    ) VALUES (
        SOURCE.CUSTOMERID,
        SOURCE.NAME,
        SOURCE.COUNTRY,
        SOURCE.REGION, 
        SOURCE.STATE, 
        SOURCE.CITY, 
        SOURCE.GENDER, 
        SOURCE.MARITALSTATUS,
        SOURCE.TOTAL_CUSTOMERS_IN_REGION,
        SOURCE.TOTAL_CUSTOMERS_IN_CITY,
        SOURCE.UNIQUE_EMAIL_COUNT,
        SOURCE.UNIQUE_PHONE_COUNT,
        SOURCE.OLDEST_CUSTOMER_DOB,
        SOURCE.YOUNGEST_CUSTOMER_DOB
    );




DESC TABLE BANKING.CUSTOMER360_GOLD.CUSTOMER_AGGREGATED;


DESC TASK BANKING.CUSTOMER360_GOLD.UPDATE_CUSTOMER_AGGREGATED_TASK
ALTER TASK BANKING.CUSTOMER360_GOLD.UPDATE_CUSTOMER_AGGREGATED_TASK RESUME;
SELECT * FROM BANKING.CUSTOMER360_GOLD.CUSTOMER_AGGREGATED;
SELECT * FROM BANKING.CUSTOMER360_SILVER.CUSTOMERS_PROCESSED
SELECT * FROM BANKING.CUSTOMER360_SILVER.CUSTOMERS_STREAM;

DESC TABLE BANKING.CUSTOMER360_BRONZE.CUSTOMERS

SELECT * FROM TABLE(SYSTEM$STREAM_HAS_DATA('BANKING.CUSTOMER360_SILVER.CUSTOMERS_STREAM'));



TRUNCATE TABLE BANKING.CUSTOMER360_BRONZE.ACCOUNTS;
TRUNCATE TABLE BANKING.CUSTOMER360_BRONZE.CUSTOMERS;
TRUNCATE TABLE BANKING.CUSTOMER360_BRONZE.TRANSACTIONS;
TRUNCATE TABLE BANKING.CUSTOMER360_SILVER.ACCOUNTS_PROCESSED;
TRUNCATE TABLE BANKING.CUSTOMER360_SILVER.TRANSACTIONS_PROCESSED;
TRUNCATE TABLE BANKING.CUSTOMER360_SILVER.CUSTOMERS_PROCESSED;
TRUNCATE TABLE BANKING.CUSTOMER360_GOLD.ACCOUNT_AGGREGATED;
TRUNCATE TABLE BANKING.CUSTOMER360_GOLD.CUSTOMER_AGGREGATED;
TRUNCATE TABLE BANKING.CUSTOMER360_GOLD.TRANSACTIONS_AGGREGATED;




SELECT count(*) FROM BANKING.CUSTOMER360_BRONZE.ACCOUNTS
SELECT count(*) FROM BANKING.CUSTOMER360_BRONZE.CUSTOMERS
SELECT count(*) FROM BANKING.CUSTOMER360_BRONZE.TRANSACTIONS;
SELECT count(*) FROM BANKING.CUSTOMER360_SILVER.ACCOUNTS_PROCESSED;
SELECT count(*) FROM BANKING.CUSTOMER360_SILVER.TRANSACTIONS_PROCESSED;
SELECT count(*) FROM BANKING.CUSTOMER360_SILVER.CUSTOMERS_PROCESSED;
SELECT count(*) FROM BANKING.CUSTOMER360_GOLD.ACCOUNT_AGGREGATED;
SELECT count(*) FROM BANKING.CUSTOMER360_GOLD.CUSTOMER_AGGREGATED;
SELECT count(*) FROM BANKING.CUSTOMER360_GOLD.TRANSACTIONS_AGGREGATED;

SELECT * FROM BANKING.CUSTOMER360_BRONZE.ACCOUNTS limit 10
SELECT * FROM BANKING.CUSTOMER360_BRONZE.CUSTOMERS limit 10
SELECT * FROM BANKING.CUSTOMER360_BRONZE.TRANSACTIONS limit 10;
SELECT * FROM BANKING.CUSTOMER360_SILVER.ACCOUNTS_PROCESSED limit 10;
SELECT * FROM BANKING.CUSTOMER360_SILVER.TRANSACTIONS_PROCESSED limit 10;
SELECT * FROM BANKING.CUSTOMER360_SILVER.CUSTOMERS_PROCESSED limit 10;
SELECT * FROM BANKING.CUSTOMER360_GOLD.ACCOUNT_AGGREGATED limit 10;
SELECT * FROM BANKING.CUSTOMER360_GOLD.CUSTOMER_AGGREGATED limit 10;
SELECT * FROM BANKING.CUSTOMER360_GOLD.TRANSACTIONS_AGGREGATED limit 10;
